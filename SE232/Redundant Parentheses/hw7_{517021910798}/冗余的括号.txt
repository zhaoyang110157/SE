第一思路：
采用lab1的代码进行修改迭代
	第一步： 通过读入式子，计算初步结果
	第二步： 逐对删去括号，计算结果
		因为我们lab1的完善，所以我们已经能够充分的判定优先级，所以如果我们的优先级改变，则结果必然不同。如果并未改变则可以删去。
		在这里有一个问题就是我们这里得到的式子采用的是字母代替数字的方式来进行运算。所以我们可以考虑，使用ASCII码来计算整个式子。
		补充，这里可以删去一部分检索错误的部分，因为我们这里所给的式子是规定正确的。
	问题：   同时因为ASCII码的值仍然比较特殊，所以可能又出现无法计算的情况，这个是这一方法需要解决的问题，

第二思路：
分析优先级计算：
	受到lab1代码启发， 可以检索括号进行单独运算，
	也就是说，我们可以通过检索括号，判定周围部分的运算等级来判定是否删去括号。

总结规则：	第一点： 前方是减号，乘号且只有乘，可以删去括号
    * 的内部有+ — 当然不可以， 同时 - 去掉之后会有变号 
	第二点： 前方是除号，不可以删去括号
	第三点：前方加号
		1、后面是加减法
		2、内部全部是乘除法
	第四点：内部括号视为同等阶基础元素  。 可以通过计算两边的对应（和）数量来判断
	

重点重点，找右括号！！！！
  如果找做括号可能有以下情况出现。   (a+b)*(c+s)
  因为这里默认式子合法，所以我们可以确定在 ‘）’左边最近的就是对应的‘（’
  也是因为没有从后往前找的 find（ ）的原因

开头和结尾的括号  首尾算作不影响的 ‘+’号进行判定